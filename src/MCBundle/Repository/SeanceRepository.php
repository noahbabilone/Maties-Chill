<?php

namespace MCBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SeanceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SeanceRepository extends EntityRepository
{
    public function getDescSeances()
    {
        $query = $this->createQueryBuilder('a');
        $query->orderBy('a.id', 'DESC');
        return $query
            ->getQuery()
            ->getResult();

    }

   

    public function searchSimple($search)
    {
        $em = $this->getEntityManager();
        if ($search != null) {
            $query = $em->createQuery("
                    SELECT s
                    FROM MCBundle:Seance s
                    JOIN s.film f
                    WHERE f.title LIKE :search OR f.synopsis LIKE :search OR f.originalTitle LIKE :search OR f.actors LIKE :search")
                ->setParameter('search', '%' . $search . '%');
        } else {
            $query = $em->createQuery("SELECT s FROM MCBundle:Seance s");
        }
        return $query;
    }

    /**
     * @param $keyword
     * @param null $limit
     * @param null $order
     * @param null $typeView
     * @param null $location
     * @return \Doctrine\ORM\AbstractQuery|\Doctrine\ORM\Query
     * @internal param null $sort
     * @internal param $search
     */
    public function searchSeance($keyword, $limit = null, $order = null, $typeView = null, $location = null)
    {
        $req = " SELECT s
                  FROM MCBundle:Seance s
                  JOIN s.film f
                  JOIN s.address a
                  WHERE  (s.date > :today) AND (f.title LIKE :keyword OR f.synopsis LIKE :keyword OR f.originalTitle LIKE :keyword OR f.actors LIKE :keyword)";
        if ($typeView !== null) {
            $req .= " AND s.typeView = :typeView";
            $data['typeView'] = $typeView;
        }
        if ($location !== null) {
            $req .= " AND (a.town = :location OR a.postCode = :location)";
            $data['location'] = $location;
        }

//dump($req);
//        die;
        if ($order === '2') {
            $req .= " ORDER BY s.date DESC";
        } else if ($order === '3') {
            $req .= " ORDER BY s.price ASC";
        } else if ($order === '4') {
            $req .= " ORDER BY s.price DESC";
        } else {//($order === '1' || $order == null) {
            $req .= " ORDER BY s.date ASC";
        }


        $em = $this->getEntityManager();
        if ($keyword != null) {
            $data['today'] = new \DateTime();
            $data['keyword'] = '%' . $keyword . '%';
            $query = $em->createQuery($req)
                ->setParameters($data)
                ->setMaxResults($limit);
            return $query->getResult();

        } else {
            return array();
        }
    }

    public function findParticipant($creator)
    {

        $em = $this->getEntityManager();
        $query = $em->createQuery("
                    SELECT p
                    FROM MCBundle:Seance s
                    JOIN s.creator c
                    JOIN  MCBundle:Participant p
                    WHERE c.id = :creator AND s.id = p.seance
                    ORDER BY s.date ASC")
            ->setParameter('creator', $creator);

        return $query->getResult();
//                            JOIN s.creator p

    }

    public function nextSeances($limit = null)
    {

        $em = $this->getEntityManager();
        $query = $em->createQuery("
                    SELECT s AS seance, (
                      SELECT COUNT (p)
                      FROM MCBundle:Participant p 
                      JOIN p.seance sc 
                      WHERE sc.id = s.id) AS participants  
                    FROM MCBundle:Seance s 
                    WHERE s.date >= :today 
                    ORDER BY s.date ASC")
            ->setParameter("today", new \DateTime())
            ->setMaxResults($limit);

        return $query->getResult();

    }

    public function seanceID($seance)
    {

        $em = $this->getEntityManager();
        $query = $em->createQuery("
                    SELECT s  AS seance, (
                      SELECT COUNT (p)
                      FROM MCBundle:Participant p 
                      JOIN p.seance sc 
                      WHERE sc.id = s.id) AS participants  
                    FROM MCBundle:Seance s 
                    WHERE s.id = :seance")
            ->setParameter("seance", $seance)
            ->setMaxResults(1);

        return $query->getResult();

    }

    public function addedMoviesSeance($limit = null)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery("
                    SELECT s
                    FROM MCBundle:Seance s
                    JOIN s.film f
                    ORDER BY f.dateAdded DESC ")
            ->setMaxResults($limit);

        return $query->getResult();

    }

    public function recentMoviesSeance($limit = null)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery("
                    SELECT s AS seance,  (
                      SELECT COUNT (p)
                      FROM MCBundle:Participant p 
                      JOIN p.seance sc 
                      WHERE sc.id = s.id) AS participants  
                    FROM MCBundle:Seance s
                    JOIN s.film f
                    ORDER BY f.releaseDate DESC ")
            ->setMaxResults($limit);

        return $query->getResult();

    }

    /**
     * @param null $limit
     * @return mixed
     */
    public function seancePaying($limit = null)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery("
                    SELECT s AS seance,  (
                      SELECT COUNT (p)
                      FROM MCBundle:Participant p 
                      JOIN p.seance sc 
                      WHERE sc.id = s.id) AS participants  
                    FROM MCBundle:Seance s 
                    WHERE s.date >= :today AND s.price > 0
                    ORDER BY s.date ASC")
            ->setParameter("today", new \DateTime())
            ->setMaxResults($limit);

        return $query->getResult();

    }

    /**
     * @param null $limit
     * @return mixed
     */
    public function seanceFree($limit = null)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery("
                    SELECT s AS seance,  (
                      SELECT COUNT (p)
                      FROM MCBundle:Participant p 
                      JOIN p.seance sc 
                      WHERE sc.id = s.id) AS participants 
                    FROM MCBundle:Seance s 
                    WHERE s.date >= :today AND s.price <= 0
                    ORDER BY s.date ASC")
            ->setParameter("today", new \DateTime())
            ->setMaxResults($limit);

        return $query->getResult();

    }

    /**
     * @param $user
     * @param null $limit
     * @return mixed
     */
    public function findMySeance($user, $limit = null)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery("
                    SELECT s AS seance,  (
                      SELECT COUNT (p)
                      FROM MCBundle:Participant p 
                      JOIN p.seance sc 
                      WHERE sc.id = s.id) AS participants  
                    FROM MCBundle:Seance s
                    JOIN s.creator c
                    WHERE s.date >= :today AND c.id = :id
                    ORDER BY s.date ASC")
            ->setParameter("today", new \DateTime())
            ->setParameter("id", $user)
            ->setMaxResults($limit);

        return $query->getResult();

    }


    /**
     * @param $user
     * @param $idSeance
     * @param int $limit
     * @return mixed
     */
    public function findOneSeanceUser($user, $idSeance, $limit = 1)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery("
                    SELECT s AS seance,  (
                      SELECT COUNT (p)
                      FROM MCBundle:Participant p 
                      JOIN p.seance sc 
                      WHERE sc.id = s.id) AS participants  
                    FROM MCBundle:Seance s
                    JOIN s.creator c
                    WHERE c.id = :id AND s.id = :idSeance
                    ORDER BY s.date ASC")
            ->setParameter("idSeance", $idSeance)
            ->setParameter("id", $user)
            ->setMaxResults($limit);

        return $query->getResult();

    }


    public function seance($typeSeance = null, $limit = null, $order = null, $typeView = null, $location = null)
    {
        $req = "SELECT s AS seance,(
                      SELECT COUNT (p)
                      FROM MCBundle:Participant p 
                      JOIN p.seance sc 
                      WHERE sc.id = s.id) AS participants
                FROM MCBundle:Seance s
                JOIN s.film f
                JOIN s.address a
                WHERE  s.date >= :today";
        if ($typeSeance == 'seances_paying') {
            $req .= " AND s.price > 0";
        } else if ($typeSeance == 'seances_free') {
            $req .= " AND s.price <= 0";
        }

        if ($typeView !== null) {
            $req .= " AND s.typeView = :typeView";
            $data['typeView'] = $typeView;
        }
        if ($location !== null) {
            $req .= " AND (a.town = :location OR a.postCode = :location)";
            $data['location'] = $location;
        }

        if ($typeSeance == 'recent_movies') {
            $req .= " ORDER BY f.releaseDate DESC ";
        } else if ($order === '2') {
            $req .= " ORDER BY s.date DESC";
        } else if ($order === '3') {
            $req .= " ORDER BY s.price ASC";
        } else if ($order === '4') {
            $req .= " ORDER BY s.price DESC";
        } else {//($order === '1' || $order == null) {
            $req .= " ORDER BY s.date ASC";
        }


//dump($req);
//        die;
        $em = $this->getEntityManager();
        $data['today'] = new \DateTime();

        $query = $em->createQuery($req)
            ->setParameters($data)
            ->setMaxResults($limit);
        return $query->getResult();


    }


}
