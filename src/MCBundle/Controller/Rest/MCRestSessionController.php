<?php/** * Created by PhpStorm. * User: Yann * Date: 21/02/2016 * Time: 17:25 */namespace MCBundle\Controller\Rest;use FOS\RestBundle\FOSRestBundle;use FOS\RestBundle\View\View as FOSView;use MCBundle\Controller\FilmController;use MCBundle\Entity\Material;use MCBundle\Entity\Session;use MCBundle\Entity\Address;use MCBundle\Entity\Modality;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use FOS\RestBundle\Controller\Annotations\View;use FOS\RestBundle\Controller\Annotations\Get;use FOS\RestBundle\Controller\Annotations\Delete;use FOS\RestBundle\Controller\Annotations\Put;use FOS\RestBundle\Controller\Annotations\Post;use Nelmio\ApiDocBundle\Annotation\ApiDoc;use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;use FOS\RestBundle\Controller\Annotations\RequestParam;use FOS\RestBundle\Request\ParamFetcher;use Symfony\Component\Validator\ConstraintViolationList;class MCRestSessionController extends Controller{    /**     * @ApiDoc(     *   resource = true,     *   description = "Return the overall Sessions List",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     * @return View     */    public function getSessionsAction()    {        $em = $this->getDoctrine()->getManager();        $sessions = $em->getRepository('MCBundle:Session')->findAll();        if (!$sessions) {            throw $this->createNotFoundException('Data not found.');        }        $view = FOSView::create();        $view->setData($sessions)->setStatusCode(200);        return $view;    }    /**     * Get a Session.     * @ApiDoc(     *   resource = true,     *   description = "Return an Session identified by ID",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * ) * Get a User.     * @param Session $session     * @return array     * @View()     * @ParamConverter("session", class="MCBundle:Session")     */    public function getSessionAction(Session $session)    {        return $session;    }    /**     * * Delete an Session identified by ID.     * @ApiDoc(     *   resource = true,     *   description = "Delete an session identified by ID",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     * Removes a Session.     * @Delete("/sessions/delete/{id}")     * @param int $id the Session id     * @return View     */    public function deleteSessionAction($id)    {        $em = $this->getDoctrine()->getManager();        $session = $em->getRepository('MCBundle:Session')->find($id);        $em->remove($session);        $em->flush();        $result = $em->getRepository('MCBundle:Session')->find($id);        $view = FOSView::create();        if (null == $result) {            $view->setData('Session deleted')->setStatusCode(200);        } else {            $view->setData('Session don\'t delete')->setStatusCode(404);        }        return $view;    }    /**     * Get all Sessions by ID Film     * @ApiDoc(     *   resource = true,     *   description = "Get all Sessions by ID Film",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     * @Get("/sessions/film/{idFilm}")     * @param $idFilm     * @return View     */    public function getSessionFilmAction($idFilm)    {        $em = $this->getDoctrine()->getManager();        $sessions = $em->getRepository('MCBundle:Session')->findByFilm($idFilm);        $view = FOSView::create();        if ($sessions) {            $view->setData($sessions)->setStatusCode(200);        } else {            $view->setData($sessions)->setStatusCode(404);        }        return $view;    }    /**     * Get all Sessions of ID User     * @ApiDoc(     *   resource = true,     *   description = "Return all Sessions of User",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     * @Get("/sessions/user/{idUser}")     * @param $idUser     * @return View     */    public function getSessionUserAction($idUser)    {        $em = $this->getDoctrine()->getManager();        $sessions = $em->getRepository('MCBundle:Session')->findByCreator($idUser);        $view = FOSView::create();        if ($sessions) {            $view->setData($sessions)->setStatusCode(200);        } else {            $view->setData($sessions)->setStatusCode(404);        }        return $view;    }    /**     * Create a session from the submitted data.<br/>     * @ApiDoc(     *   resource = true,     *   description = "Create a new session from the submitted data.",     *   statusCodes = {     *     200 = "Returned when successful",     *     400 = "Returned when the form has errors"     *   }     * )     * @param ParamFetcher $paramFetcher Paramfetcher     *     * @RequestParam(name="idUser", nullable=false, strict=true, description="id de l'utilisateur.")     * @RequestParam(name="date", nullable=false, strict=true, description="Date de la séance.")     * @RequestParam(name="typeView", nullable=false, strict=true, description="Type de visionnage.")     * @RequestParam(name="description", nullable=false, strict=true, description="Description de l'annonce.")     * @RequestParam(name="contribution", nullable=false, strict=true, description="Contribution.")     * @RequestParam(name="price", nullable=false, strict=true, description="Prix.")     * @RequestParam(name="idAddress", nullable=false, strict=true, description="Id Adresse de l'utilisateur.")     * @RequestParam(name="maxPlace", nullable=false, strict=true, description="ID de l'adresse.")     * @RequestParam(name="idModality", nullable=false, strict=true, description="ID modalité.")     * @RequestParam(name="ISAN", nullable=false, strict=true, description="Code du film.")     *     * @return View     */    public function postSessionsAction(ParamFetcher $paramFetcher)    {        $em = $this->getDoctrine()->getManager();        $objSession = new Session();        $user = $em->getRepository('UserBundle:User')->find($paramFetcher->get('idUser'));        $objSession->setCreator($user);        $objSession->setDate(new \DateTime ($paramFetcher->get('date')));        $objSession->setTypeView($paramFetcher->get('typeView'));        $objSession->setDescription($paramFetcher->get('description'));        $objSession->setContribution($paramFetcher->get('contribution'));        $objSession->setPrice($paramFetcher->get('price'));        $objSession->setMaxPlace($paramFetcher->get('maxPlace'));        if ($paramFetcher->get('idAddress')) {            $address = $em->getRepository('MCBundle:Address')->find($paramFetcher->get('idAddress'));            $objSession->setAddress($address);        }        $modality = $em->getRepository('MCBundle:Modality')->find($paramFetcher->get('idModality'));        $objSession->setModality($modality);        $film = $em->getRepository('MCBundle:Film')->findByISAN($paramFetcher->get('ISAN'));        if (!$film) {            $allocine = $this->get("mc_allocine");            $result = $allocine->get($paramFetcher->get('ISAN'));            $data = json_decode($result);            $controllerFilm = new FilmController();            $film = $controllerFilm->parserMovie($data->movie);            $em->persist($film);            $em->flush();            $objSession = $em->getRepository('MCBundle:Film')->find($film->getId());            if (!$film) {                throw $this->createNotFoundException('Error add film.');            }        }        $objSession->setFilm($film);        $em->persist($objSession);        $em->flush();        $objSession = $em->getRepository('MCBundle:Session')->find($objSession->getId());        return $objSession;    }    /**     * Update a session from the submitted data.<br/>     * @ApiDoc(     *   resource = true,     *   description = "Update session from the submitted data.",     *   statusCodes = {     *     200 = "Returned when successful",     *     400 = "Returned when the form has errors"     *   }     * )     * @param ParamFetcher $paramFetcher Paramfetcher     *     * @RequestParam(name="idUser", nullable=false, strict=true, description="id de l'utilisateur.")     * @RequestParam(name="date", nullable=false, strict=true, description="Date de la séance.")     * @RequestParam(name="typeView", nullable=false, strict=true, description="Type de visionnage.")     * @RequestParam(name="description", nullable=false, strict=true, description="Description de l'annonce.")5* @RequestParam(name="price", nullable=false, strict=true, description="Prix.")     * @RequestParam(name="idAddress", nullable=false, strict=true, description="Id de l'Adresse de l'utilisateur.")     * @RequestParam(name="maxPlace", nullable=false, strict=true, description="ID de l'adresse.")     * @RequestParam(name="idModalitly", nullable=false, strict=true, description="ID modalité.")     * @RequestParam(name="idFilm", nullable=false, strict=true, description="ID du film.")     *     * @return View     */    public function putSessionAction(ParamFetcher $paramFetcher)    {        $em = $this->getDoctrine()->getManager();        $objSession = $em->getRepository('MCBundle:Session')->find($paramFetcher->get('id'));        if ($paramFetcher->get('date'))            $objSession->setDate(new \DateTime ($paramFetcher->get('date')));        if ($paramFetcher->get('typeView'))            $objSession->setTypeView($paramFetcher->get('typeView'));        if ($paramFetcher->get('description'))            $objSession->setDescription($paramFetcher->get('description'));        if ($paramFetcher->get('contribution'))            $objSession->setContribution($paramFetcher->get('contribution'));        if ($paramFetcher->get('price'))            $objSession->setPrice($paramFetcher->get('price'));        if ($paramFetcher->get('maxPlace'))            $objSession->setMaxPlace($paramFetcher->get('maxPlace'));        if ($paramFetcher->get('idAddress')) {            $address = $em->getRepository('MCBundle:Address')->find($paramFetcher->get('idAddress'));            $objSession->setAddress($address);        }        if ($paramFetcher->get('idFilm')) {            $film = $em->getRepository('MCBundle:Film')->find($paramFetcher->get('idFilm'));            $objSession->setFilm($film);        }        $em->flush();        return $objSession;    }    /**     * Add Material Session from the submitted data by ID.<br/>     * @ApiDoc(     *   resource = true,     *   description = "Add Material Session from the submitted data by ID.",     *   statusCodes = {     *     200 = "Returned when successful",     *     400 = "Returned when the form has errors"     *   }     * )     * @Put("/sessions/add-material")     * @param ParamFetcher $paramFetcher Paramfetcher     *     * @RequestParam(name="id", nullable=false, strict=true, description="id de la séance")     * @RequestParam(name="idMaterial", nullable=false, strict=true, description="id matiriel à ajouter.")     * @return View     */    public function putMaterialSessionAction(ParamFetcher $paramFetcher)    {        $em = $this->getDoctrine()->getManager();        $session = $em->getRepository('MCBundle:Session')->find($paramFetcher->get('id'));        if ($paramFetcher->get('idMaterial')) {            $material = $em->getRepository('MCBundle:Material')->find($paramFetcher->get('idMaterial'));            $session->addMaterial($material);        }        $view = FOSView::create();        $errors = $this->get('validator')->validate($session, array('Update'));        if (count($errors) == 0) {            $em->flush();            $view->setData($session)->setStatusCode(200);            return $view;        } else {            $view = $this->getErrorsView($errors);            return $view;        }    }    /**     * Add Participant Session from the submitted data by ID.<br/>     * @ApiDoc(     *   resource = true,     *   description = "Add Material Session from the submitted data by ID.",     *   statusCodes = {     *     200 = "Returned when successful",     *     400 = "Returned when the form has errors"     *   }     * )     * @Put("/sessions/add-participant")     * @param ParamFetcher $paramFetcher Paramfetcher     *     * @RequestParam(name="id", nullable=false, strict=true, description="id de la séance")     * @RequestParam(name="idParticipant", nullable=false, strict=true, description="id Participant à ajouter.")     * @return View     */    public function putParticipantSessionAction(ParamFetcher $paramFetcher)    {        $em = $this->getDoctrine()->getManager();        $session = $em->getRepository('MCBundle:Session')->find($paramFetcher->get('id'));        if ($paramFetcher->get('username')) {            $user = $em->getRepository('UserBundle:User')->find($paramFetcher->get('idParticipant'));            $session->addParticipant($user);        }        $view = FOSView::create();        $errors = $this->get('validator')->validate($session, array('Update'));        if (count($errors) == 0) {            $em->flush();            $view->setData($session)->setStatusCode(200);            return $view;        } else {            $view = $this->getErrorsView($errors);            return $view;        }    }    /**     * @Get("/sessions/{idSession}/add/user/{idUser}")     * @View()     * @param $idSession     * @param $idUser     * @return string     */    public function addParticipantSessionAction($idSession, $idUser)    {        $em = $this->getDoctrine()->getManager();        $session = $em->getRepository('MCBundle:Session')->find($idSession);        if ($session) {            $user = $em->getRepository('UserBundle:User')->find($idUser);            if ($user) {                if ($user->getId() !== $session->getCreator()->getId()) {                    $session->addParticipant($user);                    $em->flush();                    return $session;                } else {                    return "Error: l'user is the creator";                }            } else {                return "Error: user don't exist for id : " . $idUser;            }        } else {            return "Error: Session don't exist for id " . $idSession;        }    }}