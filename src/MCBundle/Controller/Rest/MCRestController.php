<?phpnamespace MCBundle\Controller\Rest;use MCBundle\Entity\TypeMaterial;use FOS\RestBundle\Controller\Annotations\Get;use FOS\RestBundle\Controller\Annotations\Post;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use FOS\RestBundle\Controller\Annotations\View;use Nelmio\ApiDocBundle\Annotation\ApiDoc;use FOS\RestBundle\Controller\Annotations\RequestParam;use FOS\RestBundle\Request\ParamFetcher;use FOS\RestBundle\View\View as FOSView;class MCRestController extends Controller{    /**     * Return the overall TypeMaterial list.     *     * @ApiDoc(     *   resource = true,     *   description = "Return the overall TypeMaterial list.",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     *     * @Get("/type_materials")     * @return View     */    public function getTypeMaterialsAction()    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('MCBundle:TypeMaterial')->findAll();        if (!$entity) {            throw $this->createNotFoundException('Data not found.');        }        $view = FOSView::create();        $view->setData($entity)->setStatusCode(200);        return $view;    }    /**     * Return an TypeMaterial by ID material.     * @ApiDoc(     *   resource = true,     *   description = "Return an TypeMaterial by ID",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     * @Get("/type_materials/{id}")     * @param $id     * @return array     * @View()     */    public function getTypeMaterialAction($id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('MCBundle:TypeMaterial')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Data not found.');        }        $view = FOSView::create();        $view->setData($entity)->setStatusCode(200);        return $view;    }    /**     * @ApiDoc(     *   resource = true,     *   description = "Create a TypeMaterial from the submitted data.",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     * @param ParamFetcher $paramFetcher Paramfetcher     *     * @RequestParam(name="title", nullable=false, strict=true, description="title.")     * @return View     */    public function postTypeMaterialAction(ParamFetcher $paramFetcher)    {        $em = $this->getDoctrine()->getManager();        $oTypeMaterial = new TypeMaterial();        $oTypeMaterial->setTitle($paramFetcher->get('title'));        $em->persist($oTypeMaterial);        $em->flush();        return $em->getRepository('MCBundle:TypeMaterial')->find($oTypeMaterial->getId());    }    /**     * Return the overall Modality list.     *     * @ApiDoc(     *   resource = true,     *   description = "Return the overall Modality List",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     *     * @Get("/modality")     * @return string $type_material     * @View()     */    public function getModalitiesAction()    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('MCBundle:Modality')->findAll();        if (!$entity) {            throw $this->createNotFoundException('Data not found.');        }        $view = FOSView::create();        $view->setData($entity)->setStatusCode(200);        return $view;    }    /**     * Return an Modality by ID.     * @ApiDoc(     *   resource = true,     *   description = "Return an Modality by ID",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     * @Get("/modality/{id}")     * @param $id     * @return View     */    public function getModalityAction($id)    {        $em = $this->getDoctrine()->getManager();        $entity = $em->getRepository('MCBundle:Modality')->find($id);        if (!$entity) {            throw $this->createNotFoundException('Data not found.');        }        $view = FOSView::create();        $view->setData($entity)->setStatusCode(200);        return $view;    }    /**     * @ApiDoc(     *   resource = true,     *   description = "Return an Material by ID",     *   statusCodes = {     *     200 = "Returned when successful",     *     404 = "Returned when the user is not found"     *   }     * )     * @Get("/materials/{idMaterial}")     * @param $idMaterial     * @return array     * @View()     */    public function getMaterialAction($idMaterial)    {        $em = $this->getDoctrine()->getManager();        return $em->getRepository('MCBundle:Material')->findByUser($idMaterial);    }    /**     * Create a Material from the submitted data.<br/>     *     * @ApiDoc(     *   resource = true,     *   description = "Creates a new Material from the submitted data.",     *   statusCodes = {     *     200 = "Returned when successful",     *     400 = "Returned when the form has errors"     *   }     * )     *     * @param ParamFetcher $paramFetcher Paramfetcher     *     * @RequestParam(name="idUser", nullable=false, strict=true, description="id de l'user.")     * @RequestParam(name="description", nullable=false, strict=true, description="description.")     * @RequestParam(name="typeMaterial", nullable=false, strict=true, description="typeMaterial.")     *     * @return View     */    public function postMaterialAction(ParamFetcher $paramFetcher)    {        $em = $this->getDoctrine()->getManager();        $user = $em->getRepository('UserBundle:User')->find($paramFetcher->get('idUser'));        if (!$user) {            throw $this->createNotFoundException("Error: User Don't exist !");        }        $oMaterial = new Material();        $oMaterial->setDescription($paramFetcher->get('description'));        $typeMaterial = $em->getRepository('MCBundle:TypeMaterial')->find($paramFetcher->get('typeMaterial'));        if (!$typeMaterial) {            throw $this->createNotFoundException("Type Material don't found.");        }        $oMaterial->setTypeMaterial($typeMaterial);        $em->persist($oMaterial);        $em->flush();        $oMaterial = $em->getRepository('MCBundle:Material')->find($oMaterial->getId());        $view = FOSView::create();        return $view->setData($oMaterial)->setStatusCode(200);    }    /**     * Create a address from the submitted data.<br/>     *     * @ApiDoc(     *   resource = true,     *   description = "Creates a new Address from the submitted data.",     *   statusCodes = {     *     200 = "Returned when successful",     *     400 = "Returned when the form has errors"     *   }     * )     *     * @param ParamFetcher $paramFetcher Paramfetcher     *     * @RequestParam(name="title", nullable=false, strict=true, description="Address title.")     * @RequestParam(name="Street", nullable=false, strict=true, description="Rue")     * @RequestParam(name="floor", nullable=false, strict=true, description="Etage")     * @RequestParam(name="floorDoor", nullable=false, strict=true, description="Porte d'entrée")     * @RequestParam(name="building", nullable=false, strict=true, description="Numéro du Batiment.")     * @RequestParam(name="address", nullable=false, strict=true, description="Adresse")     * @RequestParam(name="address2", nullable=false, strict=true, description="Autre information concernant l'adresse.")     * @RequestParam(name="phone", nullable=false, strict=true, description="Téléphone.")     * @RequestParam(name="town", nullable=false, strict=true, description="Ville.")     * @RequestParam(name="postCode", nullable=false, strict=true, description="Code postal.")     *     * @return View     */    public function postAddressAction(ParamFetcher $paramFetcher)    {        $em = $this->getDoctrine()->getManager();        $address = new Address();        $address->setTitle($paramFetcher->get('title'));        $address->setStreet($paramFetcher->get('street'));        $address->setFloor($paramFetcher->get('floor'));        $address->setFrontDoor($paramFetcher->get('frontDoor'));        $address->setBuilding($paramFetcher->get('building'));        $address->setAddress($paramFetcher->get('address'));        $address->setAddress2($paramFetcher->get('address2'));        $address->setPhone($paramFetcher->get('phone'));        $address->setPostCode($paramFetcher->get('postCode'));        $address->setTown($paramFetcher->get('town'));        $address->setOther($paramFetcher->get('other'));        $em->persist($address);        $em->flush();        $address = $em->getRepository('MCBundle:Address')->find($address->getId());        return $address;    }}